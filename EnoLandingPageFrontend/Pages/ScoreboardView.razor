@page "/scoreboard"
@page "/scoreboard/round/{selectedRoundId:long}"

@using Microsoft.Extensions.Logging
@using EnoCore.Scoreboard
@using EnoCore
@using EnoLandingPageFrontend.Services

@inject LandingPageScoreboardService ScoreboardService
@inject ILogger<ScoreboardView> logger

@if (currentScoreboard != null)
{
    <table class="scoreboard">
        <colgroup>
            <col class="team-rank" style="width:50px;" />
            <col class="team-name" style="width:15%;" />
            <col class="team-score" style="width:100px;" />
            @foreach (var service in currentScoreboard.Services)
            {
                <col style="width: 1fr;" />
            }
        </colgroup>
        <thead>
            <tr>
                <td colspan="3" class="p-2">
                    <div>
                        <a href="/scoreboard/round/0"><i class="fas fa-angle-double-left" /></a>
                        <a href="/scoreboard/round/@(currentScoreboard.CurrentRound - 1)"><i class="fas fa-angle-left" /></a>
                        Round @currentScoreboard.CurrentRound
                        <a href="/scoreboard/round/@(currentScoreboard.CurrentRound + 1)"><i class="fas fa-angle-right" /></a>
                        <a href="/scoreboard"><i class="fas fa-angle-double-right" /></a>
                    </div>
                </td>
                @foreach (var service in currentScoreboard.Services)
                {
                    <td>@service.ServiceName</td>
                }
            </tr>
        </thead>
        @for (int t = 0; t < currentScoreboard.Teams.Length; t++)
        {
            var team = currentScoreboard.Teams[t];
            <tr class="bordered">
                <td class="team-rank">@(t+1)</td>
                <td class="team-name">logo @team.Name</td>
                <td class="team-score">@((int) team.TotalPoints)</td>
                @for (int s = 0; s < team.ServiceDetails.Length; s++)
                {
                    var serviceDetails = team.ServiceDetails[s];

                    @if (previousScoreboard == null)
                    {
                        /*
                        <td class="p-2 service-container service-@(Enum.GetName(serviceDetails.ServiceStatus))">
                            <table>
                                <tr>
                                    <td><i class="scoreboard-icon fas fa-meteor" /></td>
                                    <td>@((long) serviceDetails.AttackPoints)</td>
                                </tr>
                                <tr>
                                    <td><i class="scoreboard-icon fas fa-shield-alt" /></td>
                                    <td>@((long) serviceDetails.AttackPoints)</td>
                                </tr>
                                <tr>
                                    <td><i class="scoreboard-icon fas fa-heartbeat" /></td>
                                    <td>@((long) serviceDetails.AttackPoints)</td>
                                </tr>
                            </table>
                        </td>

                */
                    }
                    else
                    {
                        long slaDiff = (long)(serviceDetails.ServiceLevelAgreementPoints - previousScoreboard.Teams[t].ServiceDetails[s].ServiceLevelAgreementPoints);
                        long attackDiff = (long)(serviceDetails.AttackPoints - previousScoreboard.Teams[t].ServiceDetails[s].AttackPoints);
                        long defenseDiff = (long)(serviceDetails.LostDefensePoints - previousScoreboard.Teams[t].ServiceDetails[s].LostDefensePoints);
                        <td class="p-2 service-@(Enum.GetName(serviceDetails.ServiceStatus))">
                            <table>
                                <tr class="rightaligned">
                                    <td><i class="scoreboard-icon fas fa-meteor" /></td>
                                    <td class="service-points-absolute">@((long) serviceDetails.AttackPoints)</td>
                                    <td class="service-points-diff">(@(attackDiff.ToString("+#;-#;±0")))</td>
                                </tr>
                                <tr class="rightaligned">
                                    <td><i class="scoreboard-icon fas fa-shield-alt" /></td>
                                    <td class="service-points-absolute">@((long) serviceDetails.LostDefensePoints)</td>
                                    <td class="service-points-diff">(@(defenseDiff.ToString("+#;-#;±0")))</td>
                                </tr>
                                <tr class="rightaligned">
                                    <td><i class="scoreboard-icon fas fa-heartbeat" /></td>
                                    <td class="service-points-absolute">@((long) serviceDetails.ServiceLevelAgreementPoints) </td>
                                    <td class="service-points-diff">(@(slaDiff.ToString("+#;-#;±0")))</td>
                                </tr>
                            </table>
                        </td>
                    }
                }
            </tr>
        }
    </table>
}


@code {
    [Parameter]
    public long? selectedRoundId { get; set; }
    private Scoreboard? previousScoreboard;
    private Scoreboard? currentScoreboard;

    protected override Task OnInitializedAsync()
    {
        ScoreboardService.NewScoreboardEvent += HandleNewScoreboardEvent;
        ScoreboardService.OldScoreboardEvent += HandleOldScoreboardEvent;
        return Task.CompletedTask;
    }

    protected override void OnParametersSet()
    {
        if (selectedRoundId is long roundId)
        {
            // We are in "show old round" mode.
            ScoreboardService.TryGetOrRequest(roundId, out currentScoreboard);
            ScoreboardService.TryGetOrRequest(roundId - 1, out previousScoreboard);
        }
        else
        {
            // We are in "show current round" mode.
            currentScoreboard = ScoreboardService.LatestScoreboard;
            if (currentScoreboard?.CurrentRound > 1)
            {
                ScoreboardService.TryGetOrRequest(currentScoreboard.CurrentRound.Value - 1, out previousScoreboard);
            }
        }
    }

    public void Dispose()
    {
        ScoreboardService.NewScoreboardEvent -= HandleNewScoreboardEvent;
        ScoreboardService.OldScoreboardEvent -= HandleOldScoreboardEvent;
    }

    private void HandleOldScoreboardEvent(Scoreboard oldScoreboard)
    {
        if (selectedRoundId is long roundId)
        {
            // We are in "show old round" mode.
            if (oldScoreboard.CurrentRound == roundId)
            {
                currentScoreboard = oldScoreboard;
            }
            if (oldScoreboard.CurrentRound == roundId - 1)
            {
                previousScoreboard = oldScoreboard;
            }
        }
        else
        {
            // We are in "show current round" mode.
            if (oldScoreboard.CurrentRound == currentScoreboard?.CurrentRound - 1)
            {
                previousScoreboard = oldScoreboard;
            }
        }
        StateHasChanged();
    }

    private void HandleNewScoreboardEvent(Scoreboard newScoreboard)
    {
        logger.LogInformation("HandleNewScoreboardEvent");
        if (selectedRoundId == null) // We are in "show current round" mode.
        {
            if (newScoreboard.CurrentRound > currentScoreboard?.CurrentRound)
            {
                // A new round has finished.
                ScoreboardService.TryGetOrRequest(newScoreboard.CurrentRound.Value - 1, out previousScoreboard);
                currentScoreboard = newScoreboard;
            }
            else
            {
                // The CTF was restarted or we just started
                previousScoreboard = null;
                currentScoreboard = newScoreboard;
                ScoreboardService.TryGetOrRequest(newScoreboard.CurrentRound.Value - 1, out previousScoreboard);
            }
            StateHasChanged();
        }
    }
}
